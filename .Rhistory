1+1
1 *9
2.54*18
2.54*14
2.54*8
load("C:/download/getdata-data-ss06hid.csv")
load sk.csv
load sk
20+20
40+ 317*3+81.96+8+45.92+179.06+36+73.47+53.17+83.74+61.58+10.16+2.16+1.99+32.55+16.73+12.36+39.62+40+16.80+16.15+19.02+7.64+10.09+27.78+6.68+15.44+27.82+2.44+5.56+40+8.07+90.00+35.24
3565+2232
2098+ 1200 +250
2098+ 1200 +250 + 1000
3565＋　2232
3565+2232
3565+2232 - 600 - 300 - 1000
43.38 + 11.33 + 15*1.07
121.98 + 11.33 + 15*1.07
175*1.07
find.package('devtools')
find.package("devtools")
install.packages('devtools')
library(devtools)
find.package("devtools")
library(devtools)
install.packages("RMySQL", type = "source")
library(RMySQL)
library(RMySQL)
library(RMySQL)
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
library(RMySQL)
R.home()
Sys.getenv()
envVariables = Sys.getenv()
envVariables["PATH"]
envVariables["MYSQL_HOME"]
install.packages("RMySQL", type = "source")
getwd()
library(caret)
library(caret)
setwd("C:/course/open_courses/practical machine learning/project")
setwd("C:/course/open_courses/practical machine learning/project")
setwd("C:/course/open_courses/practical machine learning/project")
library(caret)
library(ggplot2)
#data <- read.csv("pml-training.csv", na.string = "NA")
##remove the NAs variables first
data <- read.csv("pml-training.csv", na.string = "NA")
data0 <- read.csv("pml-training.csv", na.string = "")
data99 <- read.csv("pml-testing.csv", na.string = "NA")
remove_NA <- function(data){
col_num <- dim(data)[2]
row_num <- dim(data)[1]
na_col <- c()
for (i in 1:col_num) {
if (sum(is.na(data[,i])) > 0.5*row_num) na_col <- c(na_col,i)
}
na_col
}
pml <- data[, -c(remove_NA(data0), remove_NA(data))]
pml99 <- data99[, -c(remove_NA(data0), remove_NA(data))]
rm(list= "data0")
###change some variable's names
colnames(pml)[1] <- "row_num"
colnames(pml)[dim(pml)[2]] <- "class"
colnames(pml99)[1] <- "row_num"
colnames(pml99)[dim(pml99)[2]] <- "class"
#toString?? the whole
##transform the time to POSIXt class
pml$cvtd_timestamp <-strptime(as.character(pml$cvtd_timestamp), format = "%m/%d/%Y %H:%M")
leftoverDate <- strptime(as.character(data$cvtd_timestamp[which(is.na(pml$cvtd_timestamp))]), format = "%d/%m/%Y %H:%M")
pml$cvtd_timestamp[which(is.na(pml$cvtd_timestamp))] <-leftoverDate
##transfer the time and date variable to numeric for further exploration
pml$cvtd_timestamp <- as.numeric(pml$cvtd_timestamp)
#########99 means testing set
pml99$cvtd_timestamp <-strptime(as.character(pml99$cvtd_timestamp), format = "%m/%d/%Y %H:%M")
leftoverDate99 <- strptime(as.character(data99$cvtd_timestamp[which(is.na(pml99$cvtd_timestamp))]), format = "%d/%m/%Y %H:%M")
pml99$cvtd_timestamp[which(is.na(pml99$cvtd_timestamp))] <-leftoverDate99
##transfer the time and date variable to numeric for further exploration
pml99$cvtd_timestamp <- as.numeric(pml99$cvtd_timestamp)
qplot(class, row_num data = pml, col = 'class')
qplot(class, row_num, data = pml, col = 'class')
qplot(row_num, class, data = pml, col = 'class')
qplot(row_num, as.factor(class), data = pml, col = 'class')
qplot(row_num, as.factor(class), data = pml, col = as.factor(class)
)
class9pml$class)
class(pml$class)
class(pml99$class)
class(data$classe)
qplot(row_num, (class), data = pml, col = as.factor(class))
qplot(row_num, class, data = pml, col = as.factor(class))
qplot(row_num, class, data = pml, col = class)
rm(list= ls())
setwd("C:/course/open_courses/practical machine learning/project")
library(caret)
library(ggplot2)
#data <- read.csv("pml-training.csv", na.string = "NA")
##remove the NAs variables first
data <- read.csv("pml-training.csv", na.string = "NA")
data0 <- read.csv("pml-training.csv", na.string = "")
data99 <- read.csv("pml-testing.csv", na.string = "NA")
remove_NA <- function(data){
col_num <- dim(data)[2]
row_num <- dim(data)[1]
na_col <- c()
for (i in 1:col_num) {
if (sum(is.na(data[,i])) > 0.5*row_num) na_col <- c(na_col,i)
}
na_col
}
pml <- data[, -c(remove_NA(data0), remove_NA(data))]
pml99 <- data99[, -c(remove_NA(data0), remove_NA(data))]
rm(list= "data0")
###change some variable's names
colnames(pml)[1] <- "row_num"
colnames(pml)[dim(pml)[2]] <- "class"
colnames(pml99)[1] <- "row_num"
colnames(pml99)[dim(pml99)[2]] <- "class"
#toString?? the whole
##transform the time to POSIXt class
pml$cvtd_timestamp <-strptime(as.character(pml$cvtd_timestamp), format = "%m/%d/%Y %H:%M")
leftoverDate <- strptime(as.character(data$cvtd_timestamp[which(is.na(pml$cvtd_timestamp))]), format = "%d/%m/%Y %H:%M")
pml$cvtd_timestamp[which(is.na(pml$cvtd_timestamp))] <-leftoverDate
##transfer the time and date variable to numeric for further exploration
pml$cvtd_timestamp <- as.numeric(pml$cvtd_timestamp)
#########99 means testing set
pml99$cvtd_timestamp <-strptime(as.character(pml99$cvtd_timestamp), format = "%m/%d/%Y %H:%M")
leftoverDate99 <- strptime(as.character(data99$cvtd_timestamp[which(is.na(pml99$cvtd_timestamp))]), format = "%d/%m/%Y %H:%M")
pml99$cvtd_timestamp[which(is.na(pml99$cvtd_timestamp))] <-leftoverDate99
##transfer the time and date variable to numeric for further exploration
pml99$cvtd_timestamp <- as.numeric(pml99$cvtd_timestamp)
pmlss <- pml
qplot(row_num, class, data = pmlss, col = class)
qplot(row_num, class, data = pmlss, col = 'class')
qplot(row_num, class, data = pmlss, col = class)
cor(row_num~., data = pml)
s<-cor(pml)
dim(pml)
windows()
qplot(row_num, class, data = pml, col = class)
par(rfmar=c(8,8))
par(rfmarg=c(8,8))
par(mfrow=c(8,8))
class(pml[1])
class(pml[,1])
qplot(pml[1], class, data = pml, col = class)
qplot(pml[,1], class, data = pml, col = class)
windows()
par(mfrow=c(8,8))
for (i in 1:(dim(pml)[2]-1)){
qplot(pml[,i], class, data = pml, col = class)
}
windows()
for (i in 1:(dim(pml)[2]-1)){
qplot(pml[,i], class, data = pml, col = class)
}
for (i in 1:(dim(pml)[2]-1)){
windows()
qplot(pml[,i], class, data = pml, col = class)
}
graph.off()
graphics.off()
for (i in 1:4){
windows()
qplot(pml[,i], class, data = pml, col = class)
}
figure_lst = c()
for (i in 1:5){
each_figure <- qplot(pml[,i], class, data = pml, col = class)
figure_lst = c(figure_lst, each_figure)
}
multiplot(figure_lst)
library(ggplot2)
multiplot(figure_lst)
?plotlist
source("multiplot")
source("multiplot.R")
source("multiplot.R")
multiplot(figure_lst)
multiplot(plotlist = figure_lst)
figure_lst = c()
for (i in 1:1){
each_figure <- qplot(pml[,i], class, data = pml, col = class)
figure_lst = c(figure_lst, each_figure)
}
windows()
multiplot(plotlist = figure_lst)
qplot(pml[,i], class, data = pml, col = class)
multiplot(plotlist = figure_lst)
multiplot(figure_lst)
figure_lst = c()
for (i in 1:2){
each_figure <- qplot(pml[,i], class, data = pml, col = class)
figure_lst = c(figure_lst, each_figure)
}
multiplot(figure_lst)
for (i in 1:2){
qplot(pml[,i], class, data = pml, col = class)
#figure_lst = c(figure_lst, each_figure)
}
for (i in 1:2){
ggplot(pml[,i], class, data = pml, col = class)
#figure_lst = c(figure_lst, each_figure)
}
figure_lst = c()
for (i in 1:2){
each_figure <- ggplot(pml[,i], class, data = pml, col = class)
figure_lst = c(figure_lst, each_figure)
}
figure_lst = c()
for (i in 1:2){
each_figure <- ggplot(pml, aes(x=pml[,i], y=class, colour=class))
figure_lst = c(figure_lst, each_figure)
}
multiplot(figure_lst)
ggplot(pml, aes(x=pml[,i], y=class, colour=class))
ggplot(pml, aes(x=pml[,i], y=class, colour=class)) +  geom_line()
ggplot(pml, aes(x=pml[,i], y=class, colour=class)) +  geom_point()
qplot(pml[,1], class, data = pml, col = class)
ggplot(pml, aes(x=pml[,i], y=class)) +  geom_point()
ggplot(pml, aes(x=pml[,1], y=class, colour=class)) +  geom_point()
ggplot(pml, aes(x=pml[,2], y=class, colour=class)) +  geom_point()
for (i in 1:20){
each_figure <- ggplot(pml, aes(x=pml[,i], y=class, colour=class)) +  geom_point()
figure_lst = c(figure_lst, each_figure)
}
multiplot(figure_lst)
multiplot(figure_lst)
figure_lst = c()
for (i in 1:3){
each_figure <- ggplot(pml, aes(x=pml[,i], y=class, colour=class)) +  geom_point()
figure_lst = c(figure_lst, each_figure)
}
print(figure_lst)
library(gridExtra)
install.packages("gridExtra")
ls()
multiplot(figure_lst, col = 2)
library(gridExtra)
grid.arrange(figure_lst, ncol=2)
multiplot(figure_lst, ncol =3)
multiplot(figure_lst, cols =3)
grid.arrange(figure_lst, ncol=2)
?graid.arrange
?grid.arrange
ggplot(pml, aes(x=pml[,1], y=class, colour=class)) +  geom_point()
ggplot(pml, aes(x=pml[,2], y=class, colour=class)) +  geom_point()
ggplot(pml, aes(x=pml[,3], y=class, colour=class)) +  geom_point()
ggplot(pml, aes(x=pml[,4], y=class, colour=class)) +  geom_point()
ggplot(pml, aes(x=pml[,5], y=class, colour=class)) +  geom_point()
ggplot(pml, aes(x=pml[,6], y=class, colour=class)) +  geom_point()
require(gridExtra)
figure_lst = c()
for (i in 1:3){
each_figure <- ggplot(pml, aes(x=pml[,i], y=class, colour=class)) +  geom_point()
figure_lst = c(figure_lst, each_figure)
}
grid.arrange(figure_lst, ncol=2)
?grid.arrange
grid.arrange(figure_lst, ncols=2)
grid.arrange(figure_lst)
grid.arrange(figure_lst[1:3],ncol = 2)
grid.arrange(figure_lst[1],figure_lst[2],ncol = 2)
figure_lst
class(figure_lst)
library(grid)
grid.arrange(figure_lst[1],figure_lst[2],ncol = 2)
libarary(wq)
install.packages("wq")
library(wq)
layOut(figure_lst)
?layOut
layOut(list(figure_lst[1,], 1 ,1),list(figure_lst[2,], 1 ,2),list(figure_lst[3,], 1 ,3))
layOut(list(figure_lst[1], 1 ,1),list(figure_lst[2], 1 ,2),list(figure_lst[3], 1 ,3))
ggplot(pml, aes(x=pml[,1], y=class, colour=class)) +  geom_point()
names(pml)[1]
class(pml[, -1])
class(pml[-1])
pml <- pml[, -1]
str(pml
)
pml99 <- pml99[,-1]
which(!(lapply(pml, class) == "integer"| lapply(pml, class) == "numeric"))
pml_n <- pml[, -which(!(lapply(pml, class) == "integer"| lapply(pml, class) == "numeric"))]
pml_f <- pml[, which(!(lapply(pml, class) == "integer"| lapply(pml, class) == "numeric"))[1:2]]
##to keep it as dataframe: datafram[n]
pml_outcome <- pml[which(!(lapply(pml, class) == "integer"| lapply(pml, class) == "numeric"))[3]]
pml_n99 <- pml99[, -which(!(lapply(pml99, class) == "integer"| lapply(pml99, class) == "numeric"))]
pml_f99 <- pml99[, which(!(lapply(pml99, class) == "integer"| lapply(pml99, class) == "numeric"))[1:2]]
##to keep it as dataframe: datafram[n]
pml_outcome99 <- pml99[which(!(lapply(pml99, class) == "integer"| lapply(pml99, class) == "numeric"))[3]]
dumm_model<-dummyVars(~., data = pml_f, sep = "_")
pml_f_dum <- as.data.frame(predict(dumm_model, pml_f))
str(pml_f_dum)
pml_f99[,2] <- (c("yes", rep("no",9)))##not sure why
pml_f99[,2] <- (c("yes", rep("no",9)))##not sure why
pml_f99
pml_f_dum99 <- as.data.frame(predict(dumm_model, pml_f99))
pml_f_dum99
pml_f_dum99$new_window_no <- rep(1, 10)
pml_f_dum99
pml_f_dum99$new_window_yes <- rep(0, 10)
pml_f_dum99
pml_f_dum
pml_f99[,2] <- (c("yes", rep("no",19)))##not sure why --because it should be 19 here
pml_f99
pml_f_dum99 <- as.data.frame(predict(dumm_model, pml_f99))
pml_f_dum99
pml_f_dum99$new_window_no <- rep(1, 20)
pml_f_dum99$new_window_yes <- rep(0, 20)
pml_f_dum99
lapply(pml_f_dum, sum)
nzv <- nearZeroVar(pml_n, saveMetrics = TRUE)
sum(nzv$nzv)
set.seed(777)
norm_tranYJ <-preProcess(pml_n, method = "YeoJohnson")
tranYJ_pml_n <- predict(norm_tranYJ, pml_n)
tranYJ_pml_n99 <- predict(norm_tranYJ, pml_n99)
center_scale <- preProcess(tranYJ_pml_n, method = c("center","scale"))
tranYJ_CS_pml_n <- predict(center_scale, tranYJ_pml_n)
tranYJ_CS_pml_n99 <- predict(center_scale, tranYJ_pml_n99)
descrCor <- cor(tranYJ_CS_pml_n)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = 0.85)
## the findCorrelation return column index that should be removed due to pair correlation
tranYJ_CS_ReCo_pml_n <- tranYJ_CS_pml_n[, -highlyCorDescr]
tranYJ_CS_ReCo_pml_n99 <- tranYJ_CS_pml_n99[, -highlyCorDescr]
descrCor2 <- cor(tranYJ_CS_ReCo_pml_n)
summary(descrCor2[upper.tri(descrCor2)])
#####6)linear dependency
findLinearCombos(pml_n)
findLinearCombos(tranYJ_CS_ReCo_pml_n)
pca_model <- preProcess(tranYJ_CS_ReCo_pml_n, method = "pca", thresh = 0.95)## is 0.95 as threshold good or bad?
summary(pca_model)
pca_model$numComp
dim(tranYJ_CS_ReCo_pml_n)
tranYJ_CS_ReCo_PCA_pml_n<- predict(pca_model, tranYJ_CS_ReCo_pml_n)
tranYJ_CS_ReCo_PCA_pml_n99<- predict(pca_model, tranYJ_CS_ReCo_pml_n99)
str(pml)
pml
# dim(pml)
# [1] 19622    60
#####################have to remove the row numbers!!!!!!!
pml_dum <-  cbind(pml_n, pml_f_dum, pml_outcome)
pml_dum99 <-  cbind(pml_n99, pml_f_dum99, pml_outcome99)
############
pml_pca <-cbind(tranYJ_CS_ReCo_PCA_pml_n,pml_f_dum, pml_outcome)
pml_pca99 <-cbind(tranYJ_CS_ReCo_PCA_pml_n99,pml_f_dum99, pml_outcome99)
# dim(pml_pca)
# [1] 19622    39
pml_remove_corr <-cbind(tranYJ_CS_ReCo_pml_n,pml_f_dum, pml_outcome)
pml_remove_corr99 <-cbind(tranYJ_CS_ReCo_pml_n99,pml_f_dum99, pml_outcome99)
# > dim(pml_remove_corr)
# [1] 19622    60
pml_pca_dum <- cbind(tranYJ_CS_ReCo_PCA_pml_n, pml_f, pml_outcome)
pml_pca_dum99 <- cbind(tranYJ_CS_ReCo_PCA_pml_n99, pml_f99, pml_outcome99)
##try a simple tree model with cross validation
set.seed(12312)
inTrain <- createDataPartition( y= pml_pca$class, p = 0.9, list = FALSE)
training <- pml_pca[inTrain, ]
testing  <- pml_pca[-inTrain, ]
#identical(sort(unique(c(testing[[1]], training[[1]]))), unique(pml[[1]]))-----so simple bootstrap sampling called in caret here is sample without replacement, which is a little bit confusing...
fitControl <- trainControl(## repeated 10-fold CV
method = "repeatedcv",
number = 10,
## repeated  3 times
repeats = 3)
set.seed(12023)
pca_mod_rpart_fit <- train(class~., data = training, method = "rpart" , trControl = fitControl)
testing_pca_rpart_predict <- predict(pca_mod_rpart_fit, testing)
sum(testing_pca_rpart_predict == testing$class)/length(testing_pca_rpart_predict)
testing_pca_rpart_predict
save(pml,pml99,pml_dum,pml_dum99, pml_pca,pml_pca99, pml_remove_corr, pml_remove_corr99, pml_pca_dum,pml_pca_dum99,  file= "processed_data_pml.RData")
pca_mod_rpart_fit
pml_pca99_pca_rpart_predict <- predict(pca_mod_rpart_fit, pml_pca99)
pml_pca99_pca_rpart_predict
set.seed(12312)
inTrain <- createDataPartition( y= pml_pca$class, p = 0.9, list = FALSE)
training <- pml_pca[inTrain, ]
testing  <- pml_pca[-inTrain, ]
set.seed(1770)
pca_mod_rf_fit <- train( class ~ .,data = training, method = "rf")
save(pca_mod_rf_fit, file= "pca_mod_rf_fit_onlyTrainingSet.RData")
pca_mod_rf_fit
testing_pca_rf_predict <- predict(pca_mod_rf_fit, testing)
sum(testing[,"class"] == testing_pca_rf_predict)/length(testing_pca_rf_predict)
pml_pca99_pca_rf_predict <- predict(pca_mod_rf_fit, pml_pca99)
pml_pca99_pca_rf_predict
set.seed(12312)
inTrain <- createDataPartition( y= pml_remove_corr$class, p = 0.9, list = FALSE)
training <- pml_remove_corr[inTrain, ]
testing  <- pml_remove_corr[-inTrain, ]
fitControl <- trainControl(## repeated 10-fold CV
method = "repeatedcv",
number = 10,
## repeated  3 times
repeats = 1)
set.seed(17701)
remove_corr_mod_rf_fit <- train( class ~.,data = training, method = "rf", trControl = fitControl)
pca_model$numComp
testing_pca_rpart_predict
pca_mod_rpart_fit
sum(testing_pca_rpart_predict == testing$class)/length(testing_pca_rpart_predict)
save(pca_mod_rpart_fit, "pca_mod_rpart_fit.RData")
save(pca_mod_rpart_fit, file = "pca_mod_rpart_fit.RData")
pca_mod_rf_fit
sum(testing[,"class"] == testing_pca_rf_predict)/length(testing_pca_rf_predict)
